name: PR Label & Assignee Auto

on:
  pull_request:
    types: [opened, reopened, synchronize]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  label_and_assign:
    runs-on: ubuntu-latest

    steps:
      - name: PR 정보 추출
        id: vars
        run: |
          echo "pr_title=${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT
          echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          echo "pr_author=${{ github.event.pull_request.user.login }}" >> $GITHUB_OUTPUT

      - name: 라벨 생성 및 작성자 Assignee 등록
        uses: actions/github-script@v7
        with:
          script: |
            const prTitle = '${{ steps.vars.outputs.pr_title }}';
            const prNumber = parseInt('${{ steps.vars.outputs.pr_number }}', 10);
            const prAuthor = '${{ steps.vars.outputs.pr_author }}';

            await (async ({ github, context, core }) => {
              const match = prTitle.match(/\[(\d+)주차\]/);
              if (!match) {
                core.info('PR 제목에 [n주차] 패턴이 없어 라벨 작업을 건너뜀');
                return;
              }

              const labelName = `${match[1]}주차`;

              // 라벨 존재 여부 확인
              const labels = await github.rest.issues.listLabelsForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
              });

              const labelExists = labels.data.find(l => l.name === labelName);

              // 라벨 없으면 생성
              if (!labelExists) {
                const randomColor = Math.floor(Math.random() * 0xffffff)
                  .toString(16)
                  .padStart(6, '0');

                await github.rest.issues.createLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: labelName,
                  color: randomColor,
                });

                core.info(`'${labelName}' 라벨 생성 완료`);
              } else {
                core.info(`'${labelName}' 라벨은 이미 존재`);
              }

              // PR에 라벨 부착
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                labels: [labelName],
              });

              core.info(`PR #${prNumber}에 '${labelName}' 라벨 부착 완료`);

              // PR 작성자 Assignee로 등록
              const pr = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
              });

              const currentAssignees = pr.data.assignees.map(a => a.login);

              if (currentAssignees.includes(prAuthor)) {
                core.info(`작성자 ${prAuthor}는 이미 assignee로 등록됨`);
              } else {
                await github.rest.issues.addAssignees({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  assignees: [prAuthor],
                });
                core.info(`작성자 ${prAuthor}를 assignee로 추가함`);
              }
            })({ github, context, core });
