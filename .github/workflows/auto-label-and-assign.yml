name: PR Label & Assignee Auto

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  label_and_assign:
    runs-on: ubuntu-latest
    steps:
      - name: 라벨명과 PR 작성자 가져오기
        id: vars
        run: |
          echo "pr_title=${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT
          echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          echo "pr_author=${{ github.event.pull_request.user.login }}" >> $GITHUB_OUTPUT

      - name: n주차 라벨 파싱, 라벨 생성/부착, assignee 할당
        uses: actions/github-script@v7
        with:
          script: |
            const prTitle = '${{ steps.vars.outputs.pr_title }}';
            const prNumber = parseInt('${{ steps.vars.outputs.pr_number }}', 10);
            const prAuthor = '${{ steps.vars.outputs.pr_author }}';

            // [n주차] 형태에서 n주차 추출
            const match = prTitle.match(/\[(\d+)주차\]/);
            if (!match) {
              core.info('PR 제목에 [n주차] 패턴이 없어 라벨 작업을 건너뜀');
              return;
            }
            const labelName = `${match[1]}주차`;

            // 현재 리포지토의 라벨 목록 조회
            const labels = await github.issues.listLabelsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const labelExists = labels.data.find(l => l.name === labelName);

            // 라벨이 없으면 생성 (랜덤 색상 지정)
            if (!labelExists) {
              const randomColor = Math.floor(Math.random()*0xffffff).toString(16).padStart(6, '0');
              await github.issues.createLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: labelName,
                color: randomColor,
              });
              core.info(`라벨 '${labelName}' 생성 (색상: #${randomColor})`);
            } else {
              core.info(`라벨 '${labelName}' 이미 존재`);
            }

            // PR에 라벨 붙이기 (중복은 자동 무시)
            await github.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              labels: [labelName],
            });
            core.info(`라벨 '${labelName}' PR #${prNumber}에 부착 완료`);

            // PR 작성자가 이미 assignee인지 확인
            const pr = await github.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
            });

            const assignees = pr.data.assignees.map(a => a.login);

            if (assignees.includes(prAuthor)) {
              core.info(`작성자 ${prAuthor}는 이미 assignee로 등록되어 있음`);
            } else {
              // assignee 추가
              await github.issues.addAssignees({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                assignees: [prAuthor],
              });
              core.info(`작성자 ${prAuthor}를 assignee로 추가함`);
            }
